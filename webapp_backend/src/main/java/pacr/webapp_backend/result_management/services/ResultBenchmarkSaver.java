package pacr.webapp_backend.result_management.services;

import org.springframework.lang.Nullable;
import org.springframework.stereotype.Component;
import pacr.webapp_backend.result_management.BenchmarkPropertyResult;
import pacr.webapp_backend.result_management.BenchmarkResult;
import pacr.webapp_backend.result_management.CommitResult;
import pacr.webapp_backend.shared.EventCategory;
import pacr.webapp_backend.shared.ICommit;
import pacr.webapp_backend.shared.IEventHandler;
import pacr.webapp_backend.shared.ResultInterpretation;

import javax.validation.constraints.NotNull;
import java.util.Map;
import java.util.Objects;

/**
 * Saves benchmarking results that were generated by a benchmarker of the pacr system. Can create a new event and
 * update observers of INewestResult.
 */
@Component
public class ResultBenchmarkSaver extends ResultSaver {

    private ResultGetter subjectForObservers;
    private IEventHandler eventHandler;

    /**
     * Creates a ResultBenchmarkSaver with access to results and a benchmark manager.
     * @param resultAccess access to results in storage.
     * @param benchmarkManager a benchmark manager to add newly detected benchmarks.
     * @param resultGetter the result getter that is the subject for observers that need to be updated.
     * @param eventHandler the event handler that events can be added to.
     */
    ResultBenchmarkSaver(IResultAccess resultAccess, BenchmarkManager benchmarkManager, ResultGetter resultGetter,
                         IEventHandler eventHandler) {
        super(resultAccess, benchmarkManager);
        this.subjectForObservers = resultGetter;
        this.eventHandler = eventHandler;
    }

    /**
     * Creates a new event with comparison to the comparison commit and updates observers of INewestResult.
     * @param result the result. Cannot be null
     * @param commit the commit of the result. Cannot be null.
     * @param comparisonCommitHash the hash of the commit for comparison. May be null (in this case no comparison was
     *                             done).
     */
    @Override
    void updateOtherComponents(@NotNull CommitResult result, @NotNull ICommit commit,
                               @Nullable String comparisonCommitHash) {
        Objects.requireNonNull(result);
        Objects.requireNonNull(commit);

        double totalImprovementPercentage = 0;
        int numberOfComparisons = 0;

        for (BenchmarkResult benchmarkResult : result.getBenchmarksIterable()) {
            for (BenchmarkPropertyResult propertyResult : benchmarkResult.getPropertiesIterable()) {
                if (propertyResult.isCompared()) {
                    totalImprovementPercentage += (propertyResult.getRatio() - 1d) * 100d;
                    ++numberOfComparisons;
                }
            }
        }

        int averageImprovementPercentage = 0;
        if (numberOfComparisons > 0) {
            averageImprovementPercentage = (int) Math.round(totalImprovementPercentage / numberOfComparisons);
        }

        NewResultEvent benchmarkingEvent = new NewResultEvent(EventCategory.BENCHMARKING, commit.getCommitHash(),
                commit.getRepositoryName(), result.getGlobalError(), averageImprovementPercentage,
                comparisonCommitHash);

        eventHandler.addEvent(benchmarkingEvent);

        subjectForObservers.updateAll();
    }
}
